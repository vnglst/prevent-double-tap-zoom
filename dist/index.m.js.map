{"version":3,"file":"index.m.js","sources":["../src/Button/Button.tsx","../src/BackgroundImage/BackgroundImage.tsx","../src/BottomBar/BottomBar.tsx","../src/BottomBar/index.ts","../src/BottomBar/BottomBarItem.tsx","../src/Grid/Grid.tsx","../src/Grid/index.ts","../src/Grid/Item.tsx","../src/Input/Input.tsx","../src/Overlay/Overlay.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  font-weight: 900;\n  font-size: 18px;\n  text-shadow: 0 2px 0 rgba(0, 0, 0, 0.07);\n  background: var(--geel);\n  border-radius: 10px;\n  border: 1px solid #011627;\n  color: #011627;\n  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12);\n  text-decoration: none;\n  padding: 15px;\n\n  &:disabled {\n    background: grey;\n    color: #002747;\n  }\n`\n\ninterface IButtonProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst Button = ({ children, className, ...other }: IButtonProps) => {\n  const classes = 'my-button ' + className\n  return (\n    <StyledButton className={classes} {...other}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default Button\n","import * as React from 'react'\nimport './BackgroundImage.css'\n\ninterface IBackgroundImage {\n  className?: string\n  imageSrc: any\n  children: React.ReactNode\n}\n\nconst BackgroundImage = ({\n  className,\n  imageSrc,\n  children,\n  ...other\n}: IBackgroundImage) => {\n  const classes = 'background-image ' + className\n  return (\n    <div>\n      <div\n        className={classes}\n        style={{ backgroundImage: `url('${imageSrc}')` }}\n        {...other}\n      />\n      <div className=\"background-image-children\">{children}</div>\n    </div>\n  )\n}\n\nexport default BackgroundImage\n","import * as React from 'react'\nimport './BottomBar.css'\nimport BottomBarItem from './BottomBarItem'\n\ninterface IBottomBarProps {\n  children: React.ReactNode\n  value: string\n  onChange: any\n}\n\nclass BottomBar extends React.Component<IBottomBarProps, object> {\n  public static Item: typeof BottomBarItem\n  public render() {\n    const children = this.generateChildren()\n    return <div className=\"bottom-bar\">{children}</div>\n  }\n\n  private generateChildren() {\n    const { children: childrenProp, value, onChange } = this.props\n    return React.Children.map(childrenProp, (child, childIndex) => {\n      if (!React.isValidElement(child)) {\n        return null\n      }\n      const childProps = child.props as any\n      const childValue =\n        childProps.value === undefined ? childIndex : childProps.value\n\n      return React.cloneElement(child as any, {\n        onChange,\n        selected: childValue === value,\n        value: childValue,\n      })\n    })\n  }\n}\n\nexport default BottomBar\n","import BottomBar from './BottomBar'\nimport BottomBarItem from './BottomBarItem'\n\nBottomBar.Item = BottomBarItem\n\nexport default BottomBar\n","import * as React from 'react'\nimport './BottomBarItem.css'\n\ninterface IBottomBarItemProps {\n  value: string\n  onChange?: any\n  selected?: boolean\n  icon: React.ReactNode\n  label?: string\n}\n\nconst BottomBarItem = ({\n  value,\n  label,\n  onChange,\n  icon,\n  selected,\n}: IBottomBarItemProps) => {\n  let classes = 'item'\n  if (selected) {\n    classes += ' item-selected'\n  }\n  return (\n    <button className={classes} onMouseDown={() => onChange(value)}>\n      {icon}\n      {label && <p>{label}</p>}\n    </button>\n  )\n}\n\nexport default BottomBarItem\n","import * as React from 'react'\nimport './Grid.css'\nimport Item from './Item'\n\ninterface IGridProps {\n  children: React.ReactNode\n}\n\nclass Grid extends React.Component<IGridProps, object> {\n  public static Item: typeof Item\n  public render() {\n    return <div className=\"grid\">{this.props.children}</div>\n  }\n}\n\nexport default Grid\n","import Grid from './Grid'\nimport Item from './Item'\n\nGrid.Item = Item\n\nexport default Grid\n","import Button from '../Button'\nimport * as React from 'react'\nimport './Item.css'\n\ninterface IItemProps {\n  onMouseDown?: React.EventHandler<React.MouseEvent<HTMLElement>>\n  onTouchStart?: React.EventHandler<React.TouchEvent<HTMLElement>>\n  children: React.ReactNode\n  correct?: boolean\n  wrong?: boolean\n  almostCorrect?: boolean\n}\n\nconst Item = ({\n  children,\n  correct,\n  wrong,\n  almostCorrect,\n  ...other\n}: IItemProps) => {\n  let classes = 'grid-item'\n  if (correct) {\n    classes += ' correct'\n  }\n  if (wrong) {\n    classes += ' wrong'\n  }\n  if (almostCorrect) {\n    classes += ' almost-correct'\n  }\n  return (\n    <Button className={classes} {...other}>\n      {children}\n    </Button>\n  )\n}\n\nexport default Item\n","import * as React from 'react'\nimport './Input.css'\n\ninterface IInputProps extends React.HTMLProps<HTMLInputElement> {\n  className?: string\n  valid?: boolean\n}\n\nconst Input = ({ className, valid, ...other }: IInputProps) => {\n  const classes = `my-input ${valid ? 'valid' : 'invalid'} ${className}`\n  return <input className={classes} {...other} />\n}\n\nexport default Input\n","import * as React from 'react'\nimport './Overlay.css'\n\ninterface IOverlayProps {\n  children: React.ReactNode\n  className?: string\n}\n\nclass Overlay extends React.Component<IOverlayProps, object> {\n  public render() {\n    return (\n      <div className=\"overlay\">\n        <div className={`overlay-content slide-in-top ${this.props.className}`}>\n          {this.props.children}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Overlay\n"],"names":["StyledButton","styled","button","Button","_a","children","className","other","React.createElement","BackgroundImage","imageSrc","style","backgroundImage","tslib_1.__extends","BottomBar","this","generateChildren","value","onChange","React.Children","map","child","childIndex","React.isValidElement","childProps","props","childValue","undefined","React.cloneElement","selected","React.Component","Item","label","classes","onMouseDown","Grid","correct","wrong","almostCorrect","Input","valid","Overlay"],"mappings":"y6BAGA,UAAMA,EAAeC,EAAOC,ocAAM,ggBAwB5BC,EAAS,SAACC,GAAE,IAAAC,aAAUC,cAAWC,gCAErC,OACEC,EAACR,KAAaM,UAFA,aAAeA,GAESC,GACnCF,ICtBDI,EAAkB,SAACL,GACvB,IAAAE,cACAI,aACAL,aACAE,2CAGA,OACEC,aACEA,WACEF,UAJU,oBAAsBA,EAKhCK,OAASC,gBAAiB,QAAQF,SAC9BH,IAENC,SAAKF,UAAU,6BAA6BD,mBCblD,4DAwBA,OAxBwBQ,OAEfC,mBAAP,WACE,IAAMT,EAAWU,KAAKC,mBACtB,OAAOR,SAAKF,UAAU,cAAcD,IAG9BS,6BAAR,WACQ,IAAAV,aAA0Ba,UAAOC,aACvC,OAAOC,EAAeC,eAAkB,SAACC,EAAOC,GAC9C,IAAKC,EAAqBF,GACxB,OAAO,KAET,IAAMG,EAAaH,EAAMI,MACnBC,OACiBC,IAArBH,EAAWP,MAAsBK,EAAaE,EAAWP,MAE3D,OAAOW,EAAmBP,GACxBH,WACAW,SAAUH,IAAeT,EACzBA,MAAOS,UApBSI,GCPxBhB,EAAUiB,KCQY,SAAC3B,OACrBa,UACAe,UACAd,aAIIe,EAAU,OAId,oBAFEA,GAAW,kBAGXzB,YAAQF,UAAW2B,EAASC,YAAa,WAAM,OAAAhB,EAASD,YAErDe,GAASxB,WAAIwB,KCjBpB,kBAAA,4DAKA,OALmBnB,OAEVsB,mBAAP,WACE,OAAO3B,SAAKF,UAAU,QAAQS,KAAKU,MAAMpB,cAH1ByB,GCLnBK,EAAKJ,KCUQ,SAAC3B,GACZ,IAAAC,aACA+B,YACAC,UACAC,kBACA/B,sDAEI0B,EAAU,YAUd,OATIG,IACFH,GAAW,YAETI,IACFJ,GAAW,UAETK,IACFL,GAAW,mBAGXzB,EAACL,KAAOG,UAAW2B,GAAa1B,GAC7BF,ICxBP,IAAMkC,EAAQ,SAACnC,GAAE,IAAAE,cAAWkC,UAAOjC,6BAEjC,OAAOC,aAAOF,UADE,aAAYkC,EAAQ,QAAU,eAAalC,GACrBC,mBCFxC,4DAUA,OAVsBM,OACb4B,mBAAP,WACE,OACEjC,SAAKF,UAAU,WACbE,SAAKF,UAAW,gCAAgCS,KAAKU,MAAMnB,WACxDS,KAAKU,MAAMpB,eALAyB"}