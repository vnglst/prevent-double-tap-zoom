{"version":3,"file":"index.umd.js","sources":["../src/Button.tsx","../src/BackgroundImage.tsx","../src/BottomBar/BottomBar.tsx","../src/BottomBar/index.ts","../src/BottomBar/BottomBarItem.tsx","../src/Grid/Grid.tsx","../src/Grid/index.ts","../src/Grid/Item.tsx","../src/Input/Input.tsx","../src/Overlay/Overlay.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from 'styled-components'\n\ninterface IButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode\n  className?: string\n}\n\nconst Button = ({ children, className, ...other }: IButtonProps) => (\n  <StyledButton className={className} {...other}>\n    {children}\n  </StyledButton>\n)\n\nconst StyledButton = styled.button`\n  font-weight: 900;\n  font-size: 18px;\n  text-shadow: 0 2px 0 rgba(0, 0, 0, 0.07);\n  background: var(--geel);\n  border-radius: 10px;\n  border: 1px solid #011627;\n  color: #011627;\n  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12);\n  text-decoration: none;\n  padding: 15px;\n\n  &:disabled {\n    background: grey;\n    color: #002747;\n  }\n`\n\nexport default Button\n","import * as React from 'react'\nimport styled from 'styled-components'\n\ninterface IBackgroundImage {\n  className?: string\n  imageSrc: string\n  children: React.ReactNode\n}\n\nconst BackgroundImage = ({\n  className,\n  imageSrc,\n  children,\n  ...other\n}: IBackgroundImage) => (\n  <div>\n    <ImageContainer className={className} imageSrc={imageSrc} {...other} />\n    <ChildrenContainer>{children}</ChildrenContainer>\n  </div>\n)\n\nconst ImageContainer = styled.div`\n  background-image: ${(props: { imageSrc: string }) =>\n    `url(${props.imageSrc})`};\n  background-size: cover;\n  display: block;\n  filter: blur(2px);\n  height: 100%;\n  left: 0;\n  right: 0;\n  position: fixed;\n  transform: scale(\n    1.1\n  ); /* adds scaling to avoid white border on blurred image */\n`\n\nconst ChildrenContainer = styled.div`\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\nexport default BackgroundImage\n","import * as React from 'react'\nimport './BottomBar.css'\nimport BottomBarItem from './BottomBarItem'\n\ninterface IBottomBarProps {\n  children: React.ReactNode\n  value: string\n  onChange: any\n}\n\nclass BottomBar extends React.Component<IBottomBarProps, object> {\n  public static Item: typeof BottomBarItem\n  public render() {\n    const children = this.generateChildren()\n    return <div className=\"bottom-bar\">{children}</div>\n  }\n\n  private generateChildren() {\n    const { children: childrenProp, value, onChange } = this.props\n    return React.Children.map(childrenProp, (child, childIndex) => {\n      if (!React.isValidElement(child)) {\n        return null\n      }\n      const childProps = child.props as any\n      const childValue =\n        childProps.value === undefined ? childIndex : childProps.value\n\n      return React.cloneElement(child as any, {\n        onChange,\n        selected: childValue === value,\n        value: childValue,\n      })\n    })\n  }\n}\n\nexport default BottomBar\n","import BottomBar from './BottomBar'\nimport BottomBarItem from './BottomBarItem'\n\nBottomBar.Item = BottomBarItem\n\nexport default BottomBar\n","import * as React from 'react'\nimport './BottomBarItem.css'\n\ninterface IBottomBarItemProps {\n  value: string\n  onChange?: any\n  selected?: boolean\n  icon: React.ReactNode\n  label?: string\n}\n\nconst BottomBarItem = ({\n  value,\n  label,\n  onChange,\n  icon,\n  selected,\n}: IBottomBarItemProps) => {\n  let classes = 'item'\n  if (selected) {\n    classes += ' item-selected'\n  }\n  return (\n    <button className={classes} onMouseDown={() => onChange(value)}>\n      {icon}\n      {label && <p>{label}</p>}\n    </button>\n  )\n}\n\nexport default BottomBarItem\n","import * as React from 'react'\nimport './Grid.css'\nimport Item from './Item'\n\ninterface IGridProps {\n  children: React.ReactNode\n}\n\nclass Grid extends React.Component<IGridProps, object> {\n  public static Item: typeof Item\n  public render() {\n    return <div className=\"grid\">{this.props.children}</div>\n  }\n}\n\nexport default Grid\n","import Grid from './Grid'\nimport Item from './Item'\n\nGrid.Item = Item\n\nexport default Grid\n","import Button from '../Button'\nimport * as React from 'react'\nimport './Item.css'\n\ninterface IItemProps {\n  onMouseDown?: React.EventHandler<React.MouseEvent<HTMLElement>>\n  onTouchStart?: React.EventHandler<React.TouchEvent<HTMLElement>>\n  children: React.ReactNode\n  correct?: boolean\n  wrong?: boolean\n  almostCorrect?: boolean\n}\n\nconst Item = ({\n  children,\n  correct,\n  wrong,\n  almostCorrect,\n  ...other\n}: IItemProps) => {\n  let classes = 'grid-item'\n  if (correct) {\n    classes += ' correct'\n  }\n  if (wrong) {\n    classes += ' wrong'\n  }\n  if (almostCorrect) {\n    classes += ' almost-correct'\n  }\n  return (\n    <Button className={classes} {...other}>\n      {children}\n    </Button>\n  )\n}\n\nexport default Item\n","import * as React from 'react'\nimport './Input.css'\n\ninterface IInputProps extends React.HTMLProps<HTMLInputElement> {\n  className?: string\n  valid?: boolean\n}\n\nconst Input = ({ className, valid, ...other }: IInputProps) => {\n  const classes = `my-input ${valid ? 'valid' : 'invalid'} ${className}`\n  return <input className={classes} {...other} />\n}\n\nexport default Input\n","import * as React from 'react'\nimport './Overlay.css'\n\ninterface IOverlayProps {\n  children: React.ReactNode\n  className?: string\n}\n\nclass Overlay extends React.Component<IOverlayProps, object> {\n  public render() {\n    return (\n      <div className=\"overlay\">\n        <div className={`overlay-content slide-in-top ${this.props.className}`}>\n          {this.props.children}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Overlay\n"],"names":["Button","_a","children","className","other","React.createElement","StyledButton","button","ImageContainer","styled","div","props","imageSrc","ChildrenContainer","tslib_1.__extends","BottomBar","this","generateChildren","value","onChange","React.Children","map","child","childIndex","React.isValidElement","childProps","childValue","undefined","React.cloneElement","selected","React.Component","Item","label","classes","onMouseDown","Grid","correct","wrong","almostCorrect","Overlay","valid"],"mappings":"opCAQA,UAAMA,EAAS,SAACC,GAAE,IAAAC,aAAUC,cAAWC,gCAA6B,OAClEC,gBAACC,KAAaH,UAAWA,GAAeC,GACrCF,IAICI,iDAAsBC,ocAAM,sbCO5BC,EAAiBC,EAAOC,8QAAG,yBAEL,yOADN,SAACC,GACnB,MAAA,OAAOA,EAAMC,eAaXC,EAAoBJ,EAAOC,0FAAG,6FC1BpC,4DAwBA,OAxBwBI,OAEfC,mBAAP,WACE,IAAMb,EAAWc,KAAKC,mBACtB,OAAOZ,uBAAKF,UAAU,cAAcD,IAG9Ba,6BAAR,WACQ,IAAAd,aAA0BiB,UAAOC,aACvC,OAAOC,WAAeC,eAAkB,SAACC,EAAOC,GAC9C,IAAKC,iBAAqBF,GACxB,OAAO,KAET,IAAMG,EAAaH,EAAMX,MACnBe,OACiBC,IAArBF,EAAWP,MAAsBK,EAAaE,EAAWP,MAE3D,OAAOU,eAAmBN,GACxBH,WACAU,SAAUH,IAAeR,EACzBA,MAAOQ,UApBSI,aCPxBf,EAAUgB,KCQY,SAAC9B,OACrBiB,UACAc,UACAb,aAIIc,EAAU,OAId,oBAFEA,GAAW,kBAGX5B,0BAAQF,UAAW8B,EAASC,YAAa,WAAM,OAAAf,EAASD,YAErDc,GAAS3B,yBAAI2B,KCjBpB,kBAAA,4DAKA,OALmBlB,OAEVqB,mBAAP,WACE,OAAO9B,uBAAKF,UAAU,QAAQa,KAAKL,MAAMT,cAH1B4B,aCLnBK,EAAKJ,KCUQ,SAAC9B,GACZ,IAAAC,aACAkC,YACAC,UACAC,kBACAlC,sDAEI6B,EAAU,YAUd,OATIG,IACFH,GAAW,YAETI,IACFJ,GAAW,UAETK,IACFL,GAAW,mBAGX5B,gBAACL,KAAOG,UAAW8B,GAAa7B,GAC7BF,ICxBP,kBCAA,4DAUA,OAVsBY,OACbyB,mBAAP,WACE,OACElC,uBAAKF,UAAU,WACbE,uBAAKF,UAAW,gCAAgCa,KAAKL,MAAMR,WACxDa,KAAKL,MAAMT,eALA4B,0CRCE,SAAC7B,GACvB,IAAAE,cACAS,aACAV,aACAE,2CACsB,OACtBC,2BACEA,gBAACG,KAAeL,UAAWA,EAAWS,SAAUA,GAAcR,IAC9DC,gBAACQ,OAAmBX,oCOTV,SAACD,GAAE,IAAAE,cAAWqC,UAAOpC,6BAEjC,OAAOC,2BAAOF,UADE,aAAYqC,EAAQ,QAAU,eAAarC,GACrBC"}